<div class="container-fluid">
    <div class="row mb-5">
        <div class="col-xl-9 col-lg-9">
            <div class="card shadow mb-4">

                <!-- Card Body -->
                <div class="card-body bg-primary rounded">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="m-0 font-weight-bold text-white">Welcome
                                    back <%= current_user.first_name %> <%= current_user.last_name %>!</h5>
                                <h6 class="mt-2 mb-0 font-weight-light text-white">Book meetings with your
                                    friends,colleagues and clients.</h6>
                                <h6 class="mt-2 font-weight-light text-white ">Your calendar stays full and
                                    you stay productive</h6>

                                <a href="javascript:void(0);" onclick="openScheduleModal()" class="btn btn-Secondary bg-white text-black mt-4">
                                    <b class="meet">SCHEDULE A MEETING</b>
                                </a>
                            </div>
                            <div class="col-md-6">
                                <img src="/img/OBJECTS.png" class="float-right" alt="img">
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div id="calendar"></div>


        </div>
        <div class="col-xl-3 col-lg-3 upcoming-events">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div id="tiny-calendar">
                </div>
                <%= render 'shared/components/upcoming_meetings' %>
            </div>
        </div>
    </div>
</div>

<% content_for :modals do %>
    <%= render 'shared/modals/schedule_meeting' %>
<% end %>

<% content_for :scripts do %>
    <script>
        Vue.component('v-select', VueSelect.VueSelect);
        var eventBus = new Vue();

        new Vue({
            el: '#schedule-meeting',
            data: {
                id: null,
                title: '',
                start_date: '',
                end_date: '',
                start_time: '',
                end_time: '',
                all_day: false,
                is_repeat: false,
                repeat_type: 'd',
                repeat_day: 0,
                mute_video: false,
                mute_audio: false,
                record_meeting: false,
                description: '',
                events_tag: '',
                notification_type: 'Email',
                notification_minutes: 5,
                guests: [],
                guest_name: '',
                guest_permissions: [],
                everyone_as_admin: false,
                modify_meeting: false,
                invite_others: false,
                see_guest_list: false,
                timezones: [],
                selected_tz_name: 'Asia/Calcutta',
                room_uid: null,
                contacts:  [],
                access_code: '',
                date_range: ''
            },
            mounted: function () {
                eventBus.$on('SCHEDULE_CLICKED', (event) => {
                    this.id = event.id
                    axios.get(`/schedules/${this.id}`)
                        .then(res => res.data)
                        .then(data => {
                            this.title = data.title
                            if (data.start_date && data.end_date) {
                                this.start_date = moment(data.start_date).format('YYYY-MM-DD')
                                this.end_date = moment(data.end_date).format('YYYY-MM-DD')
                                // $('#daterange').data('daterangepicker').setStartDate(moment(this.start_date));
                                // $('#daterange').data('daterangepicker').setEndDate(moment(this.end_date));
                                if (this.start_date == this.end_date) {
                                    this.date_range = moment(data.start_date).format('DD/MM/YYYY')
                                } else {
                                    this.date_range = moment(data.start_date).format('DD/MM/YYYY') + ' - ' + moment(data.end_date).format('DD/MM/YYYY')
                                }
                            }
                            this.start_time = data.start_time
                            this.end_time = data.end_time
                            $('#start_time').val(this.start_time)
                            $('#end_time').val(this.end_time)
                            this.all_day = data.all_day
                            this.is_repeat = data.is_repeat
                            this.repeat_type = data.repeat_type
                            this.repeat_day = data.repeat_day
                            if (this.repeat_type == 'y') {
                                $('#repeat_date').val(this.repeat_day)
                            }
                            this.mute_audio = data.mute_audio
                            this.mute_video = data.mute_video
                            this.record_meeting = data.record_meeting
                            this.description = data.description
                            this.access_code = data.room.access_code
                            this.events_tag = data.events_tag
                            this.notification_type = data.notification_type
                            this.notification_minutes = data.notification_minutes
                            this.selected_tz_name = data.timezone
                            this.guests = []
                            data.guests.forEach(g => {
                                this.guests.push(g.contact)
                            })

                            if (data.guest_permissions) {
                                data.guest_permissions.forEach(gp => {
                                    switch (gp.name) {
                                        case "everyone_as_admin":
                                            this.everyone_as_admin = gp.value
                                            break
                                        case "modify_meeting":
                                            this.modify_meeting = gp.value
                                            break
                                        case "invite_others":
                                            this.invite_others = gp.value
                                            break
                                        case "see_guest_list":
                                            this.see_guest_list = gp.value
                                            break
                                        default:
                                            console.log(gp.name)
                                    }
                                })
                            }

                            this.room_uid = data.room.uid

                            $('#schedule-meeting-modal').modal('show');
                        }).catch(error => console.error(error))
                })

                eventBus.$on('CALENDAR_CLICKED', (selectedDateString) => {
                    var selectedDate = new Date(selectedDateString)
                    this.id = null
                    this.repeat_day = selectedDate.getDay();
                    this.start_date = moment(selectedDateString).format('YYYY-MM-DD')
                    this.start_time = ''
                    this.end_date = moment(selectedDateString).format('YYYY-MM-DD')
                    this.end_time = ''

                    $('#start_time').val(this.start_time)
                    $('#end_time').val(this.end_time)

                    $('#daterange').data('daterangepicker').setStartDate(moment(selectedDateString));
                    $('#daterange').data('daterangepicker').setEndDate(moment(selectedDateString));
                    this.title = ''
                    this.all_day = false
                    this.is_repeat = false
                    this.repeat_type = 'w'
                    this.mute_video = false
                    this.mute_audio = false
                    this.record_meeting = false
                    this.description = ''
                    this.event_tags = []
                    this.notification_type = 'Email'
                    this.notification_minutes = 10
                    this.guests = []
                    this.guest_name = ''
                    this.guest_permissions = []
                    this.everyone_as_admin = false
                    this.modify_meeting = false
                    this.invite_others = false
                    this.see_guest_list = false
                    this.selected_tz_name = 'Asia/Calcutta'
                })

                eventBus.$on('FULL_CALENDAR_CLICKED', (date) => {
                    function D(J) {
                        return (J < 10 ? '0' : '') + J;
                    }
                    this.start_date = moment(date)
                    this.start_time = this.getOnlyTime(date)
                    this.end_date = ''

                    var piece = this.start_time.split(":")
                    var mins = piece[0] * 60 + +piece[1] + 25
                    this.end_time = D(mins % (24 * 60) / 60 | 0) + ':' + D(mins % 60)

                    $('#start_time').val(this.start_time)
                    $('#end_time').val(this.end_time)

                    $('#daterange').data('daterangepicker').setStartDate(this.start_date);
                    $('#daterange').data('daterangepicker').setEndDate(this.start_date);
                    this.repeat_day = date.getDay();
                    this.id = null
                    this.title = ''
                    this.start_date = ''
                    this.all_day = false
                    this.is_repeat = false
                    this.repeat_type = 'w'
                    this.mute_video = false
                    this.mute_audio = false
                    this.record_meeting = false
                    this.description = ''
                    this.event_tags = []
                    this.notification_type = 'Email'
                    this.notification_minutes = 10
                    this.guests = []
                    this.guest_name = ''
                    this.guest_permissions = []
                    this.everyone_as_admin = false
                    this.modify_meeting = false
                    this.invite_others = false
                    this.see_guest_list = false
                    this.selected_tz_name = 'Asia/Calcutta'
                })

                eventBus.$on('BUTTON_CLICKED', () => {
                    this.id = null
                    this.title = ''
                    this.start_date = moment().format('YYYY-MM-DD')
                    this.end_date = moment().format('YYYY-MM-DD')
                    $('#daterange').data('daterangepicker').setStartDate(moment());
                    $('#daterange').data('daterangepicker').setEndDate(moment());
                    this.start_time = ''
                    this.end_time = ''
                    $('#start_time').val(this.start_time)
                    $('#end_time').val(this.end_time)
                    this.all_day = false
                    this.is_repeat = false
                    this.repeat_type = 'd'
                    this.repeat_day = 0
                    this.mute_video = false
                    this.mute_audio = false
                    this.record_meeting = false
                    this.description = ''
                    this.event_tags = []
                    this.notification_type = 'Email'
                    this.notification_minutes = 10
                    this.guests = []
                    this.guest_name = ''
                    this.guest_permissions = []
                    this.everyone_as_admin = false
                    this.modify_meeting = false
                    this.invite_others = false
                    this.see_guest_list = false
                    this.selected_tz_name = 'Asia/Calcutta'
                })

                const getTimezoneList = moment.tz.names().map(t => {
                    return {
                        name: `(GMT${moment.tz(t).format('Z')}) ${t}`,
                        value: t
                    }
                });
                this.timezones = getTimezoneList.sort(this.sortByZone)

                $('#daterange').daterangepicker({
                    linkedCalendars: true,
                    autoApply: true,
                    minDate: moment(),
                }, (start_date, end_date, label) => {
                    this.start_date = start_date.format('YYYY-MM-DD')
                    this.end_date = end_date.format('YYYY-MM-DD')
                    if (this.start_date == this.end_date) {
                        this.date_range = start_date.format('DD/MM/YYYY')
                    } else {
                        this.date_range = start_date.format('DD/MM/YYYY') + ' - ' + end_date.format('DD/MM/YYYY')
                    }
                })

                $('#start_time').timepicker().on('change', (event) => {
                    function D(J) {
                        return (J < 10 ? '0' : '') + J;
                    }

                    this.start_time = event.target.value
                    var piece = this.start_time.split(":")
                    var mins = piece[0] * 60 + +piece[1] + 25
                    this.end_time = D(mins % (24 * 60) / 60 | 0) + ':' + D(mins % 60)
                    $('#end_time').val(this.end_time)
                });
                $('#end_time').timepicker().on('change', (event) => {
                    this.end_time = event.target.value
                });

                $('#repeat_date').datepicker({
                    minDate: new Date((new Date()).getFullYear(), 0, 1),
                    maxDate: new Date((new Date()).getFullYear(), 11, 31),
                    hideIfNoPrevNext: true,
                    dateFormat: 'dd/mm'
                }).on('change', (event) => {
                    this.repeat_day = event.target.value
                })
            },
            methods: {
                sortByZone(a, b) {
                    let [ahh, amm] = a.name.split("GMT")[1].split(")")[0].split(":");
                    let [bhh, bmm] = b.name.split("GMT")[1].split(")")[0].split(":");
                    return (+ahh * 60 + amm) - (+bhh * 60 + bmm)
                },
                handleSubmit() {
                    let authenticity_token = $('#authenticity_token').val();

                    if (this.id) {
                        axios.post(`/schedules/${this.id}`, {
                            authenticity_token: authenticity_token,
                            title: this.title,
                            start_date: this.start_date,
                            end_date: this.end_date,
                            start_time: this.start_time,
                            end_time: this.end_time,
                            all_day: this.all_day,
                            is_repeat: this.is_repeat,
                            repeat_type: this.repeat_type,
                            repeat_day: this.repeat_day,
                            mute_video: this.mute_video,
                            mute_audio: this.mute_audio,
                            record_meeting: this.record_meeting,
                            description: this.description,
                            events_tag: this.events_tag,
                            notification_type: this.notification_type,
                            notification_minutes: this.notification_minutes,
                            guests: this.guests,
                            guest_permissions: {
                                everyone_as_admin: this.everyone_as_admin,
                                modify_meeting: this.modify_meeting,
                                invite_others: this.invite_others,
                                see_guest_list: this.see_guest_list
                            },
                            timezone: this.selected_tz_name,
                            access_code: this.access_code
                        })
                            .then(res => {
                                window.location.reload();
                            })
                            .catch(error => console.error(error))
                    } else {
                        axios.post('/schedules/store', {
                            authenticity_token: authenticity_token,
                            title: this.title,
                            start_date: this.start_date,
                            end_date: this.end_date,
                            start_time: this.start_time,
                            end_time: this.end_time,
                            all_day: this.all_day,
                            is_repeat: this.is_repeat,
                            repeat_type: this.repeat_type,
                            repeat_day: this.repeat_day,
                            mute_video: this.mute_video,
                            mute_audio: this.mute_audio,
                            record_meeting: this.record_meeting,
                            description: this.description,
                            events_tag: this.events_tag,
                            notification_type: this.notification_type,
                            notification_minutes: this.notification_minutes,
                            guests: this.guests,
                            guest_permissions: {
                                everyone_as_admin: this.everyone_as_admin,
                                modify_meeting: this.modify_meeting,
                                invite_others: this.invite_others,
                                see_guest_list: this.see_guest_list
                            },
                            timezone: this.selected_tz_name,
                            access_code: this.access_code
                        })
                            .then(res => {
                                window.location.reload();
                            })
                            .catch(error => console.error(error))
                    }
                },
                handleAddGuest() {
                    if (this.guest_name) {
                        this.guests.push(this.guest_name);
                        this.guest_name = ''
                    }
                },
                addGuest(e) {
                    if (e.keyCode == 13) {
                        e.preventDefault()
                        if (this.guest_name) {
                            this.guests.push(this.guest_name);
                            this.guest_name = ''
                        }
                    }
                },
                removeGuest(index) {
                    this.guests.splice(index, 1)
                },
                getOnlyDate(date) {
                    var month = '' + (date.getMonth() + 1),
                        day = '' + date.getDate(),
                        year = date.getFullYear();

                    if (month.length < 2)
                        month = '0' + month;
                    if (day.length < 2)
                        day = '0' + day;

                    return [year, month, day].join('-');
                },
                getOnlyTime(date) {
                    var hours = '' + date.getHours(),
                        minutes = '' + date.getMinutes();

                    if (hours.length < 2)
                        hours = '0' + hours;
                    if (minutes.length < 2)
                        minutes = '0' + minutes;

                    return [hours, minutes].join(':');
                },
                startMeeting() {
                    let authenticity_token = $('#authenticity_token').val();
                    var form = document.createElement("form")
                    var tokenEl = document.createElement("input")

                    form.method = "POST"
                    form.action = `/${this.room_uid}/start`

                    tokenEl.value = authenticity_token
                    tokenEl.name = "authenticity_token"

                    form.appendChild(tokenEl);
                    document.body.appendChild(form)
                    form.submit();
                },
                clearDateRange() {
                    $('#daterange').val('')
                },
                fetchGuests(search, loading) {
                    if (search.length) {
                        loading(true)
                        axios.get(`/contacts/ajax?keyword=${search}`)
                            .then(res => res.data)
                            .then(data => {
                                this.contacts = data
                                loading(false)
                            })
                            .catch(error => {
                                console.error(error)
                                loading(false)
                            })
                    }
                },
                onGuestSelected(selectedOption) {
                    var i = this.guests.findIndex(g => g.id == selectedOption.id)
                    if (i < 0) {
                        this.guests.push(selectedOption)
                    }
                },
                generateAccessCode() {
                    const accessCodeLength = 6
                    var validCharacters = "0123456789"
                    var accessCode = ""

                    for( var i = 0; i < accessCodeLength; i++){
                        accessCode += validCharacters.charAt(Math.floor(Math.random() * validCharacters.length));
                    }

                    this.access_code = accessCode
                },
                removeAccessCode() {
                    this.access_code = ''
                },
                openDateRangePicker() {
                    $('#daterange').data('daterangepicker').show();
                }
            }
        })

        new Vue({
            el: '#upcoming-events',
            data: {
                schedules: []
            },
            mounted() {
                axios.get('/schedules/upcoming')
                    .then(res => res.data)
                    .then(data => {
                        this.schedules = data
                    })
                    .catch(error => console.error(error))
            },
            methods: {
                getFullDate(dateString) {
                    return new Date(dateString).toDateString();
                },
                getFullName(user) {
                    if (user.first_name || user.last_name) {
                        return user.first_name + ' ' + user.last_name
                    } else {
                        return user.name
                    }
                }
            }
        })

        var calendar_el = document.getElementById('tiny-calendar')
        const tinyCalendar = new TavoCalendar(calendar_el);
        calendar_el.addEventListener('calendar-select', (e) => {
            eventBus.$emit('CALENDAR_CLICKED', tinyCalendar.getSelected())
            $('#schedule-meeting-modal').modal('show');
        })

        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            themeSystem: 'bootstrap',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'
            },
            events: {
                url: '/schedules/ajax',
                failure: function () {
                    console.log('failed')
                }
            },
            eventClick: function (info) {
                eventBus.$emit('SCHEDULE_CLICKED', info.event)
            },
            dateClick: function (info) {
                var a = new Date()
                a.setHours(0, 0, 0, 0)
                if (info.date >= a) {
                    eventBus.$emit('FULL_CALENDAR_CLICKED', info.date)
                    $('#schedule-meeting-modal').modal('show');
                }
            }
        });
        calendar.render();

        function openScheduleModal() {
            eventBus.$emit('BUTTON_CLICKED')
            $('#schedule-meeting-modal').modal('show');
        }
    </script>
<% end %>